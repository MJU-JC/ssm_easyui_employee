<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，为了对sql语句进行隔离，方便管理，mapper开发dao方式，使用namespace有特殊作用  
mapper代理开发时将namespace指定为mapper接口的全限定名  
 -->
<mapper namespace="com.shuangyulin.mapper.DepartmentMapper"> 
<!--在mapper.xml文件中配置很多的sql语句，执行每个sql语句时，封装为MappedStatement对象 
mapper.xml以statement为单位管理sql语句  
 -->
	<!-- 添加部门记录 -->
	<insert id="addDepartment" parameterType="department">
		insert into t_department(departmentNo,departmentName) values 
		(#{departmentNo},#{departmentName})
	</insert>

	<!-- 按照查询条件分页查询部门记录 -->
	<select id="queryDepartment" resultMap="departmentMap" >
		select t_department.* from t_department ${where} limit #{startIndex},#{pageSize}
	</select>
	<resultMap id="departmentMap" type="department">
        <id property="departmentNo" column="departmentNo" />
    </resultMap>

    <!-- 按照查询条件查询所有部门记录 -->
	<select id="queryDepartmentList" resultMap="departmentMap" >
		select t_department.* from t_department ${where}
	</select>

    <!-- 按照查询条件的部门记录数 -->
	<select id="queryDepartmentCount" resultType="int">
		select count(*) from t_department ${where}
	</select>

	<!-- 根据主键查询某个部门记录 -->
	<select id="getDepartment" parameterType="string" resultMap="departmentMap">
		select * from t_department where t_department.departmentNo = #{departmentNo}
	</select>

	<!-- 更新部门记录 -->
	<update id="updateDepartment" parameterType="department">
		update t_department set departmentName=#{departmentName} where departmentNo = #{departmentNo}
	</update>

	<!-- 删除部门记录 -->
	<delete id="deleteDepartment" parameterType="string">
		delete from t_department where departmentNo=#{departmentNo}
	</delete>

</mapper>
